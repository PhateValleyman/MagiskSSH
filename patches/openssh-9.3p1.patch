diff -urN a/android-tweaks.c b/android-tweaks.c
--- a/android-tweaks.c	1970-01-01 01:00:00.000000000 +0100
+++ b/android-tweaks.c	2023-03-26 14:33:56.920685524 +0200
@@ -0,0 +1,159 @@
+#include "android-tweaks.h"
+#include <stdlib.h>
+#include <limits.h>
+#include "config.h"
+
+//char *sshelper_user = NULL;
+
+//static struct passwd android_pass = { "", "", 0, 0, "", "" };
+
+/*
+ * This is a stand-in for getpwuid() on an Android system
+ * running without root authority, so the usual system call
+ * cannot be made. All references to getpwuid() must be
+ * redirected here.
+ * 
+ */
+
+static char datadir_root[] = "/data/ssh/root/";
+static char datadir_shell[] = "/data/ssh/shell/";
+static int android_uid_tweak_isLoaded = 0;
+static uid_t android_uid_tweak_uidRoot=0;
+static uid_t android_uid_tweak_uidShell=2000;
+
+static void android_uid_tweak_load(void) {
+	struct passwd *pw;
+	if(android_uid_tweak_isLoaded)
+		return;
+	android_uid_tweak_isLoaded = 1;
+	pw = getpwnam("root");
+	if(pw != NULL)
+		android_uid_tweak_uidRoot = pw->pw_uid;
+	pw = getpwnam("shell");
+	if(pw != NULL)
+		android_uid_tweak_uidShell = pw->pw_uid;
+}
+
+static char* getUidDir(uid_t uid) {
+	if(uid == android_uid_tweak_uidRoot)
+		return datadir_root;
+	else if(uid == android_uid_tweak_uidShell)
+		return datadir_shell;
+	return NULL;
+}
+
+struct passwd* getpwuida(uid_t uid) {
+	char *new_dir;
+	struct passwd *pw;
+	android_uid_tweak_load();
+	pw = getpwuid(uid);
+	if(pw != NULL && (new_dir = getUidDir(uid)) != NULL) {
+		pw->pw_dir = new_dir;
+	}
+	if(pw) {
+		pw->pw_passwd="";
+#ifdef HAVE_STRUCT_PASSWD_PW_GECOS
+		pw->pw_gecos="";
+#endif
+	}
+	return pw;
+}
+
+// these empty definitions are meant to prevent calling undefined functions
+// from a library that would be a nightmare to try to include
+
+// void *dlopen(const char *__file, int __mode) {
+// 	return NULL;
+// }
+//
+// struct protoent *getprotobyname(const char *name) {
+// 	return NULL;
+// }
+
+struct passwd *getpwnama(const char *name) {
+	char *new_dir;
+	struct passwd *pw;
+	android_uid_tweak_load();
+	pw = getpwnam(name);
+	if(pw != NULL && (new_dir = getUidDir(pw->pw_uid)) != NULL) {
+		pw->pw_dir = new_dir;
+	}
+	if(pw) {
+		pw->pw_passwd="";
+#ifdef HAVE_STRUCT_PASSWD_PW_GECOS
+		pw->pw_gecos="";
+#endif
+	}
+	return pw;
+}
+
+// struct servent *getservbyname(const char *name, const char *proto) {
+// 	return NULL;
+// }
+//
+// struct group *getgrgid(gid_t gid) {
+// 	return NULL;
+// }
+
+void endgrent(void) {
+}
+
+void endpwent(void) {
+}
+
+void setpwent(void) {
+}
+
+struct passwd *getpwent(void) {
+	return NULL;
+}
+
+// struct group *getgrnam(const char *name) {
+// 	return NULL;
+// }
+//
+// int getgrouplist(const char *user, gid_t group, gid_t *groups, int *ngroups) {
+// 	return 0;
+// }
+//
+// struct spwd *getspnam(const char *name) {
+// 	return NULL;
+// }
+//
+// int initgroups(const char *user, gid_t group) {
+// 	return 0;
+// }
+
+//int getaddrinfo(const char *node, const char *service,
+//               const struct addrinfo *hints,
+//                struct addrinfo **res) {
+//	return 0;
+//}
+
+// netdb:
+
+//int getaddrinfo (const char *__restrict __name,
+//			const char *__restrict __service,
+//			const struct addrinfo *__restrict __req,
+//			struct addrinfo **__restrict __pai) {
+//	return 0;
+//}
+
+static char path_user[PATH_MAX] = ":";
+static char path_suser[PATH_MAX] = ":";
+
+const char* get_path_android(char root) {
+	char *moddir;
+	char *storage = root?path_suser:path_user;
+
+	if(*storage == ':') {
+		moddir = getenv("MODDIR");
+		const char *formatter = root ?
+		    "/system/bin:/system/xbin:/system/sbin:%s/usr/bin" :
+		    "/system/bin:/system/xbin:%s/usr/bin";
+		if(snprintf(storage, PATH_MAX, formatter, moddir) >= PATH_MAX) {
+			storage[0] = '\0';
+		}
+	}
+	return storage;
+}
diff -urN a/android-tweaks.h b/android-tweaks.h
--- a/android-tweaks.h	1970-01-01 01:00:00.000000000 +0100
+++ b/android-tweaks.h	2023-03-26 14:33:56.920685524 +0200
@@ -0,0 +1,16 @@
+#include <sys/types.h>
+#include <pwd.h>
+#include <unistd.h>
+#include <netdb.h>
+
+#ifndef ANDROID_TWEAKS_H
+#define ANDROID_TWEAKS_H
+
+struct passwd* getpwuida(uid_t uid);
+struct passwd* getpwnama(const char *name);
+
+const char* get_path_android(char root);
+
+//char *sshelper_user;
+
+#endif
diff -urN a/auth2-pubkey.c b/auth2-pubkey.c
--- a/auth2-pubkey.c	2023-03-15 22:28:19.000000000 +0100
+++ b/auth2-pubkey.c	2023-03-26 14:33:56.920685524 +0200
@@ -373,7 +373,7 @@
 	/* Prepare and verify the user for the command */
 	username = percent_expand(options.authorized_principals_command_user,
 	    "u", user_pw->pw_name, (char *)NULL);
-	runas_pw = getpwnam(username);
+	runas_pw = getpwnama(username);
 	if (runas_pw == NULL) {
 		error("AuthorizedPrincipalsCommandUser \"%s\" not found: %s",
 		    username, strerror(errno));
@@ -642,7 +642,7 @@
 	/* Prepare and verify the user for the command */
 	username = percent_expand(options.authorized_keys_command_user,
 	    "u", user_pw->pw_name, (char *)NULL);
-	runas_pw = getpwnam(username);
+	runas_pw = getpwnama(username);
 	if (runas_pw == NULL) {
 		error("AuthorizedKeysCommandUser \"%s\" not found: %s",
 		    username, strerror(errno));
diff -urN a/auth.c b/auth.c
--- a/auth.c	2023-03-15 22:28:19.000000000 +0100
+++ b/auth.c	2023-03-26 14:33:56.920685524 +0200
@@ -485,7 +485,7 @@
 	aix_setauthdb(user);
 #endif
 
-	pw = getpwnam(user);
+	pw = getpwnama(user);
 
 #if defined(_AIX) && defined(HAVE_SETAUTHDB)
 	aix_restoreauthdb();
diff -urN a/includes.h b/includes.h
--- a/includes.h	2023-03-15 22:28:19.000000000 +0100
+++ b/includes.h	2023-03-26 14:33:56.920685524 +0200
@@ -175,4 +175,6 @@
 
 #include "entropy.h"
 
+#include "android-tweaks.h"
+
 #endif /* INCLUDES_H */
diff -urN a/loginrec.c b/loginrec.c
--- a/loginrec.c	2023-03-15 22:28:19.000000000 +0100
+++ b/loginrec.c	2023-03-26 14:33:56.924018911 +0200
@@ -312,7 +312,7 @@
 	 * reliably search wtmp(x) for the last login (see
 	 * wtmp_get_entry().)
 	 */
-	pw = getpwuid(uid);
+	pw = getpwuida(uid);
 	if (pw == NULL)
 		fatal("%s: Cannot find account for uid %ld", __func__,
 		    (long)uid);
@@ -385,7 +385,7 @@
 
 	if (username) {
 		strlcpy(li->username, username, sizeof(li->username));
-		pw = getpwnam(li->username);
+		pw = getpwnama(li->username);
 		if (pw == NULL) {
 			fatal("%s: Cannot find user \"%s\"", __func__,
 			    li->username);
diff -urN a/logintest.c b/logintest.c
--- a/logintest.c	2023-03-15 22:28:19.000000000 +0100
+++ b/logintest.c	2023-03-26 14:33:56.924018911 +0200
@@ -97,7 +97,7 @@
 
 	printf("**\n** Testing the API...\n**\n");
 
-	pw = getpwuid(getuid());
+	pw = getpwuida(getuid());
 	strlcpy(username, pw->pw_name, sizeof(username));
 
 	/* gethostname(hostname, sizeof(hostname)); */
diff -urN a/Makefile.in b/Makefile.in
--- a/Makefile.in	2023-03-15 22:28:19.000000000 +0100
+++ b/Makefile.in	2023-03-26 14:33:56.924018911 +0200
@@ -111,12 +111,14 @@
 	kexgexc.o kexgexs.o \
 	kexsntrup761x25519.o sntrup761.o kexgen.o \
 	sftp-realpath.o platform-pledge.o platform-tracing.o platform-misc.o \
-	sshbuf-io.o
+	sshbuf-io.o \
+	android-tweaks.o
 
 SKOBJS=	ssh-sk-client.o
 
 SSHOBJS= ssh.o readconf.o clientloop.o sshtty.o \
-	sshconnect.o sshconnect2.o mux.o $(SKOBJS)
+	sshconnect.o sshconnect2.o mux.o $(SKOBJS) \
+	android-tweaks.o
 
 SSHDOBJS=sshd.o auth-rhosts.o auth-passwd.o \
 	audit.o audit-bsm.o audit-linux.o platform.o \
@@ -131,7 +133,8 @@
 	srclimit.o sftp-server.o sftp-common.o \
 	sandbox-null.o sandbox-rlimit.o sandbox-systrace.o sandbox-darwin.o \
 	sandbox-seccomp-filter.o sandbox-capsicum.o sandbox-pledge.o \
-	sandbox-solaris.o uidswap.o $(SKOBJS)
+	sandbox-solaris.o uidswap.o $(SKOBJS) \
+	android-tweaks.o
 
 SFTP_CLIENT_OBJS=sftp-common.o sftp-client.o sftp-glob.o
 
diff -urN a/misc.c b/misc.c
--- a/misc.c	2023-03-15 22:28:19.000000000 +0100
+++ b/misc.c	2023-03-26 14:34:51.418230332 +0200
@@ -1168,11 +1168,11 @@
 		/* else					~user */
 	}
 	if (user != NULL) {
-		if ((pw = getpwnam(user)) == NULL) {
+		if ((pw = getpwnama(user)) == NULL) {
 			error_f("No such user %s", user);
 			goto out;
 		}
-	} else if ((pw = getpwuid(uid)) == NULL) {
+	} else if ((pw = getpwuida(uid)) == NULL) {
 		error_f("No such uid %ld", (long)uid);
 		goto out;
 	}
@@ -1789,7 +1789,7 @@
 		if (r > 0 && (size_t)r < len)
 			return;
 	}
-	r = snprintf(s, len, "/tmp/ssh-XXXXXXXXXXXX");
+	r = snprintf(s, len, "/data/local/tmp/ssh-XXXXXXXXXXXX");
 	if (r < 0 || (size_t)r >= len)
 		fatal_f("template string too short");
 }
@@ -2644,7 +2644,7 @@
 		error("%s: inconsistent arguments", tag); /* XXX fatal? */
 		return 0;
 	}
-	if (pw == NULL && (pw = getpwuid(getuid())) == NULL) {
+	if (pw == NULL && (pw = getpwuida(getuid())) == NULL) {
 		error("%s: no user for current uid", tag);
 		return 0;
 	}
diff -urN a/openbsd-compat/explicit_bzero.c b/openbsd-compat/explicit_bzero.c
--- a/openbsd-compat/explicit_bzero.c	2023-03-15 22:28:19.000000000 +0100
+++ b/openbsd-compat/explicit_bzero.c	2023-03-26 14:33:56.927352298 +0200
@@ -39,7 +39,8 @@
  * Indirect bzero through a volatile pointer to hopefully avoid
  * dead-store optimisation eliminating the call.
  */
-static void (* volatile ssh_bzero)(void *, size_t) = bzero;
+//static void (* volatile ssh_bzero)(void *, size_t) = bzero;
+static void (* volatile ssh_memset)(void *, char, size_t) = memset;
 
 void
 explicit_bzero(void *p, size_t n)
@@ -57,7 +58,8 @@
 # endif
 #endif
 
-	ssh_bzero(p, n);
+	ssh_memset(p, 0, n);
+	//ssh_bzero(p, n);
 }
 
 #endif /* HAVE_MEMSET_S */
diff -urN a/openbsd-compat/getrrsetbyname.c b/openbsd-compat/getrrsetbyname.c
--- a/openbsd-compat/getrrsetbyname.c	2023-03-15 22:28:19.000000000 +0100
+++ b/openbsd-compat/getrrsetbyname.c	2023-03-26 14:33:56.927352298 +0200
@@ -192,6 +192,7 @@
     unsigned int rdtype, unsigned int flags,
     struct rrsetinfo **res)
 {
+#if 0
 	struct __res_state *_resp = _THREAD_PRIVATE(_res, _res, &_res);
 	int result;
 	struct rrsetinfo *rrset = NULL;
@@ -202,6 +203,7 @@
 	unsigned int index_ans, index_sig;
 	u_char answer[ANSWER_BUFFER_SIZE];
 
+
 	/* check for invalid class and type */
 	if (rdclass > 0xffff || rdtype > 0xffff) {
 		result = ERRSET_INVAL;
@@ -348,6 +350,8 @@
 	if (response != NULL)
 		free_dns_response(response);
 	return (result);
+#endif
+	return ERRSET_NODATA;
 }
 
 void
diff -urN a/openbsd-compat/glob.c b/openbsd-compat/glob.c
--- a/openbsd-compat/glob.c	2023-03-15 22:28:19.000000000 +0100
+++ b/openbsd-compat/glob.c	2023-03-26 14:33:56.930685686 +0200
@@ -395,7 +395,7 @@
 		if (issetugid() != 0 || (h = getenv("HOME")) == NULL) {
 #endif
 		if ((getuid() != geteuid()) || (h = getenv("HOME")) == NULL) {
-			if ((pwd = getpwuid(getuid())) == NULL)
+			if ((pwd = getpwuida(getuid())) == NULL)
 				return pattern;
 			else
 				h = pwd->pw_dir;
@@ -404,7 +404,7 @@
 		/*
 		 * Expand a ~user
 		 */
-		if ((pwd = getpwnam((char*) patbuf)) == NULL)
+		if ((pwd = getpwnama((char*) patbuf)) == NULL)
 			return pattern;
 		else
 			h = pwd->pw_dir;
diff -urN a/openbsd-compat/pwcache.c b/openbsd-compat/pwcache.c
--- a/openbsd-compat/pwcache.c	2023-03-15 22:28:19.000000000 +0100
+++ b/openbsd-compat/pwcache.c	2023-03-26 14:33:56.930685686 +0200
@@ -64,7 +64,7 @@
 #endif
 			pwopen = 1;
 		}
-		if ((pw = getpwuid(uid)) == NULL) {
+		if ((pw = getpwuida(uid)) == NULL) {
 			if (nouser)
 				return (NULL);
 			(void)snprintf(nbuf, sizeof(nbuf), "%lu", (u_long)uid);
diff -urN a/scp.c b/scp.c
--- a/scp.c	2023-03-15 22:28:19.000000000 +0100
+++ b/scp.c	2023-03-26 14:33:56.930685686 +0200
@@ -646,7 +646,7 @@
 	if (iamremote)
 		mode = MODE_SCP;
 
-	if ((pwd = getpwuid(userid = getuid())) == NULL)
+	if ((pwd = getpwuida(userid = getuid())) == NULL)
 		fatal("unknown user %u", (u_int) userid);
 
 	if (!isatty(STDOUT_FILENO))
diff -urN a/servconf.c b/servconf.c
--- a/servconf.c	2023-03-15 22:28:19.000000000 +0100
+++ b/servconf.c	2023-03-26 14:33:56.934019071 +0200
@@ -658,7 +658,7 @@
 	{ "clientalivecountmax", sClientAliveCountMax, SSHCFG_ALL },
 	{ "authorizedkeysfile", sAuthorizedKeysFile, SSHCFG_ALL },
 	{ "authorizedkeysfile2", sDeprecated, SSHCFG_ALL },
-	{ "useprivilegeseparation", sDeprecated, SSHCFG_GLOBAL},
+	{ "useprivilegeseparation", sUsePrivilegeSeparation, SSHCFG_GLOBAL},
 	{ "acceptenv", sAcceptEnv, SSHCFG_ALL },
 	{ "setenv", sSetEnv, SSHCFG_ALL },
 	{ "permittunnel", sPermitTunnel, SSHCFG_ALL },
@@ -1066,7 +1066,7 @@
 	if (user == NULL)
 		goto out;
 
-	if ((pw = getpwnam(user)) == NULL) {
+	if ((pw = getpwnama(user)) == NULL) {
 		debug("Can't match group at line %d because user %.100s does "
 		    "not exist", line, user);
 	} else if (ga_init(pw->pw_name, pw->pw_gid) == 0) {
@@ -1315,6 +1315,13 @@
 	{ "no",				0 },
 	{ NULL, -1 }
 };
+static const struct multistate multistate_privsep[] = {
+	{ "yes",			PRIVSEP_NOSANDBOX },
+	{ "sandbox",			PRIVSEP_ON },
+	{ "nosandbox",			PRIVSEP_NOSANDBOX },
+	{ "no",				PRIVSEP_OFF },
+	{ NULL, -1 }
+};
 static const struct multistate multistate_tcpfwd[] = {
 	{ "yes",			FORWARD_ALLOW },
 	{ "all",			FORWARD_ALLOW },
@@ -1845,6 +1852,11 @@
 		intptr = &options->disable_forwarding;
 		goto parse_flag;
 
+	case sUsePrivilegeSeparation:
+		intptr = &use_privsep;
+		multistate_ptr = multistate_privsep;
+		goto parse_multistate;
+
 	case sAllowUsers:
 		chararrayptr = &options->allow_users;
 		uintptr = &options->num_allow_users;
@@ -2853,6 +2865,8 @@
 		return fmt_multistate_int(val, multistate_gatewayports);
 	case sCompression:
 		return fmt_multistate_int(val, multistate_compression);
+	case sUsePrivilegeSeparation:
+		return fmt_multistate_int(val, multistate_privsep);
 	case sAllowTcpForwarding:
 		return fmt_multistate_int(val, multistate_tcpfwd);
 	case sAllowStreamLocalForwarding:
@@ -3048,6 +3062,7 @@
 	dump_cfg_fmtint(sDisableForwarding, o->disable_forwarding);
 	dump_cfg_fmtint(sAllowStreamLocalForwarding, o->allow_streamlocal_forwarding);
 	dump_cfg_fmtint(sStreamLocalBindUnlink, o->fwd_opts.streamlocal_bind_unlink);
+	dump_cfg_fmtint(sUsePrivilegeSeparation, use_privsep);
 	dump_cfg_fmtint(sFingerprintHash, o->fingerprint_hash);
 	dump_cfg_fmtint(sExposeAuthInfo, o->expose_userauth_info);
 
diff -urN a/session.c b/session.c
--- a/session.c	2023-03-15 22:28:19.000000000 +0100
+++ b/session.c	2023-03-26 14:33:56.934019071 +0200
@@ -195,7 +195,7 @@
 	temporarily_use_uid(pw);
 
 	/* Allocate a buffer for the socket name, and format the name. */
-	auth_sock_dir = xstrdup("/tmp/ssh-XXXXXXXXXX");
+	auth_sock_dir = xstrdup("/data/local/tmp/ssh-XXXXXXXXXX");
 
 	/* Create private directory for socket */
 	if (mkdtemp(auth_sock_dir) == NULL) {
@@ -265,7 +265,7 @@
 		return;
 
 	temporarily_use_uid(pw);
-	auth_info_file = xstrdup("/tmp/sshauth.XXXXXXXXXXXXXXX");
+	auth_info_file = xstrdup("/data/local/tmp/sshauth.XXXXXXXXXXXXXXX");
 	if ((fd = mkstemp(auth_info_file)) == -1) {
 		error_f("mkstemp: %s", strerror(errno));
 		goto out;
@@ -1045,7 +1045,7 @@
 #  endif /* HAVE_ETC_DEFAULT_LOGIN */
 	if (path == NULL || *path == '\0') {
 		child_set_env(&env, &envsize, "PATH",
-		    s->pw->pw_uid == 0 ?  SUPERUSER_PATH : _PATH_STDPATH);
+		    get_path_android(s->pw->pw_uid == 0));
 	}
 # endif /* HAVE_CYGWIN */
 #endif /* HAVE_LOGIN_CAP */
diff -urN a/sftp-server.c b/sftp-server.c
--- a/sftp-server.c	2023-03-15 22:28:19.000000000 +0100
+++ b/sftp-server.c	2023-03-26 14:39:12.432430010 +0200
@@ -1283,7 +1283,7 @@
 	else if (S_ISREG(sb.st_mode)) {
 		/* Race-free rename of regular files */
 		if (link(oldpath, newpath) == -1) {
-			if (errno == EOPNOTSUPP || errno == ENOSYS
+			if (errno == EOPNOTSUPP || errno == ENOSYS || errno == EPERM
 #ifdef EXDEV
 			    || errno == EXDEV
 #endif
@@ -1706,7 +1706,7 @@
 		fatal_fr(r, "parse");
 
 	debug3("request %u: home-directory \"%s\"", id, username);
-	if ((user_pw = getpwnam(username)) == NULL) {
+	if ((user_pw = getpwnama(username)) == NULL) {
 		send_status(id, SSH2_FX_FAILURE);
 		goto out;
 	}
@@ -1741,7 +1741,7 @@
 	while (sshbuf_len(uids) != 0) {
 		if ((r = sshbuf_get_u32(uids, &n)) != 0)
 			fatal_fr(r, "parse inner uid");
-		user_pw = getpwuid((uid_t)n);
+		user_pw = getpwuida((uid_t)n);
 		name = user_pw == NULL ? "" : user_pw->pw_name;
 		debug3_f("uid %u => \"%s\"", n, name);
 		if ((r = sshbuf_put_cstring(usernames, name)) != 0)
diff -urN a/sftp-server-main.c b/sftp-server-main.c
--- a/sftp-server-main.c	2023-03-15 22:28:19.000000000 +0100
+++ b/sftp-server-main.c	2023-03-26 14:33:56.937352459 +0200
@@ -42,7 +42,7 @@
 	/* Ensure that fds 0, 1 and 2 are open or directed to /dev/null */
 	sanitise_stdfd();
 
-	if ((user_pw = getpwuid(getuid())) == NULL) {
+	if ((user_pw = getpwuida(getuid())) == NULL) {
 		fprintf(stderr, "No user found for uid %lu\n",
 		    (u_long)getuid());
 		return 1;
diff -urN a/ssh-add.c b/ssh-add.c
--- a/ssh-add.c	2023-03-15 22:28:19.000000000 +0100
+++ b/ssh-add.c	2023-03-26 14:33:56.937352459 +0200
@@ -981,7 +981,7 @@
 		struct stat st;
 		int count = 0;
 
-		if ((pw = getpwuid(getuid())) == NULL) {
+		if ((pw = getpwuida(getuid())) == NULL) {
 			fprintf(stderr, "No user found with uid %u\n",
 			    (u_int)getuid());
 			ret = 1;
diff -urN a/ssh.c b/ssh.c
--- a/ssh.c	2023-03-15 22:28:19.000000000 +0100
+++ b/ssh.c	2023-03-26 14:33:56.937352459 +0200
@@ -669,7 +669,7 @@
 	seed_rng();
 
 	/* Get user data. */
-	pw = getpwuid(getuid());
+	pw = getpwuida(getuid());
 	if (!pw) {
 		logit("No user exists for uid %lu", (u_long)getuid());
 		exit(255);
diff -urN a/sshd.c b/sshd.c
--- a/sshd.c	2023-03-15 22:28:19.000000000 +0100
+++ b/sshd.c	2023-03-26 14:33:56.940685846 +0200
@@ -1817,7 +1817,7 @@
 
 	/* Store privilege separation user for later use if required. */
 	privsep_chroot = use_privsep && (getuid() == 0 || geteuid() == 0);
-	if ((privsep_pw = getpwnam(SSH_PRIVSEP_USER)) == NULL) {
+	if ((privsep_pw = getpwnama(SSH_PRIVSEP_USER)) == NULL) {
 		if (privsep_chroot || options.kerberos_authentication)
 			fatal("Privilege separation user %s does not exist",
 			    SSH_PRIVSEP_USER);
diff -urN a/ssh-keygen.c b/ssh-keygen.c
--- a/ssh-keygen.c	2023-03-15 22:28:19.000000000 +0100
+++ b/ssh-keygen.c	2023-03-26 14:33:56.940685846 +0200
@@ -3361,7 +3361,7 @@
 	msetlocale();
 
 	/* we need this for the home * directory.  */
-	pw = getpwuid(getuid());
+	pw = getpwuida(getuid());
 	if (!pw)
 		fatal("No user exists for uid %lu", (u_long)getuid());
 	pw = pwcopy(pw);
diff -urN a/ssh-keysign.c b/ssh-keysign.c
--- a/ssh-keysign.c	2023-03-15 22:28:19.000000000 +0100
+++ b/ssh-keysign.c	2023-03-26 14:33:56.940685846 +0200
@@ -203,7 +203,7 @@
 	key_fd[i++] = open(_PATH_HOST_XMSS_KEY_FILE, O_RDONLY);
 	key_fd[i++] = open(_PATH_HOST_RSA_KEY_FILE, O_RDONLY);
 
-	if ((pw = getpwuid(getuid())) == NULL)
+	if ((pw = getpwuida(getuid())) == NULL)
 		fatal("getpwuid failed");
 	pw = pwcopy(pw);
 
